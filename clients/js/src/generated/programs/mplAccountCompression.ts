/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAppendCanopyNodesInstruction,
  type ParsedAppendInstruction,
  type ParsedCloseEmptyTreeInstruction,
  type ParsedInitEmptyMerkleTreeInstruction,
  type ParsedInitPreparedTreeWithRootInstruction,
  type ParsedInsertOrAppendInstruction,
  type ParsedPrepareBatchMerkleTreeInstruction,
  type ParsedReplaceLeafInstruction,
  type ParsedTransferAuthorityInstruction,
  type ParsedVerifyLeafInstruction,
} from '../instructions';

export const MPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS =
  'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;

export enum MplAccountCompressionAccount {
  MerkleTree,
}

export enum MplAccountCompressionInstruction {
  InitEmptyMerkleTree,
  PrepareBatchMerkleTree,
  AppendCanopyNodes,
  InitPreparedTreeWithRoot,
  ReplaceLeaf,
  TransferAuthority,
  VerifyLeaf,
  Append,
  InsertOrAppend,
  CloseEmptyTree,
}

export function identifyMplAccountCompressionInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MplAccountCompressionInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([191, 11, 119, 7, 180, 107, 220, 110])
      ),
      0
    )
  ) {
    return MplAccountCompressionInstruction.InitEmptyMerkleTree;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([230, 124, 120, 196, 249, 134, 199, 128])
      ),
      0
    )
  ) {
    return MplAccountCompressionInstruction.PrepareBatchMerkleTree;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([139, 155, 238, 167, 11, 243, 132, 205])
      ),
      0
    )
  ) {
    return MplAccountCompressionInstruction.AppendCanopyNodes;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([218, 248, 192, 55, 91, 205, 122, 10])
      ),
      0
    )
  ) {
    return MplAccountCompressionInstruction.InitPreparedTreeWithRoot;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([204, 165, 76, 100, 73, 147, 0, 128])
      ),
      0
    )
  ) {
    return MplAccountCompressionInstruction.ReplaceLeaf;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 169, 76, 72, 229, 180, 55, 161])
      ),
      0
    )
  ) {
    return MplAccountCompressionInstruction.TransferAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 220, 22, 223, 104, 10, 250, 224])
      ),
      0
    )
  ) {
    return MplAccountCompressionInstruction.VerifyLeaf;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 120, 18, 222, 236, 225, 88, 203])
      ),
      0
    )
  ) {
    return MplAccountCompressionInstruction.Append;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([6, 42, 50, 190, 51, 109, 178, 168])
      ),
      0
    )
  ) {
    return MplAccountCompressionInstruction.InsertOrAppend;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([50, 14, 219, 107, 78, 103, 16, 103])
      ),
      0
    )
  ) {
    return MplAccountCompressionInstruction.CloseEmptyTree;
  }
  throw new Error(
    'The provided instruction could not be identified as a mplAccountCompression instruction.'
  );
}

export type ParsedMplAccountCompressionInstruction<
  TProgram extends string = 'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW',
> =
  | ({
      instructionType: MplAccountCompressionInstruction.InitEmptyMerkleTree;
    } & ParsedInitEmptyMerkleTreeInstruction<TProgram>)
  | ({
      instructionType: MplAccountCompressionInstruction.PrepareBatchMerkleTree;
    } & ParsedPrepareBatchMerkleTreeInstruction<TProgram>)
  | ({
      instructionType: MplAccountCompressionInstruction.AppendCanopyNodes;
    } & ParsedAppendCanopyNodesInstruction<TProgram>)
  | ({
      instructionType: MplAccountCompressionInstruction.InitPreparedTreeWithRoot;
    } & ParsedInitPreparedTreeWithRootInstruction<TProgram>)
  | ({
      instructionType: MplAccountCompressionInstruction.ReplaceLeaf;
    } & ParsedReplaceLeafInstruction<TProgram>)
  | ({
      instructionType: MplAccountCompressionInstruction.TransferAuthority;
    } & ParsedTransferAuthorityInstruction<TProgram>)
  | ({
      instructionType: MplAccountCompressionInstruction.VerifyLeaf;
    } & ParsedVerifyLeafInstruction<TProgram>)
  | ({
      instructionType: MplAccountCompressionInstruction.Append;
    } & ParsedAppendInstruction<TProgram>)
  | ({
      instructionType: MplAccountCompressionInstruction.InsertOrAppend;
    } & ParsedInsertOrAppendInstruction<TProgram>)
  | ({
      instructionType: MplAccountCompressionInstruction.CloseEmptyTree;
    } & ParsedCloseEmptyTreeInstruction<TProgram>);
