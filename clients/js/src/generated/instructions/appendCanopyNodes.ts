/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { MPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const APPEND_CANOPY_NODES_DISCRIMINATOR = new Uint8Array([
  139, 155, 238, 167, 11, 243, 132, 205,
]);

export function getAppendCanopyNodesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    APPEND_CANOPY_NODES_DISCRIMINATOR
  );
}

export type AppendCanopyNodesInstruction<
  TProgram extends string = typeof MPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountNoop extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountNoop extends string
        ? ReadonlyAccount<TAccountNoop>
        : TAccountNoop,
      ...TRemainingAccounts,
    ]
  >;

export type AppendCanopyNodesInstructionData = {
  discriminator: ReadonlyUint8Array;
  startIndex: number;
  canopyNodes: Array<ReadonlyUint8Array>;
};

export type AppendCanopyNodesInstructionDataArgs = {
  startIndex: number;
  canopyNodes: Array<ReadonlyUint8Array>;
};

export function getAppendCanopyNodesInstructionDataEncoder(): Encoder<AppendCanopyNodesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['startIndex', getU32Encoder()],
      ['canopyNodes', getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))],
    ]),
    (value) => ({ ...value, discriminator: APPEND_CANOPY_NODES_DISCRIMINATOR })
  );
}

export function getAppendCanopyNodesInstructionDataDecoder(): Decoder<AppendCanopyNodesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['startIndex', getU32Decoder()],
    ['canopyNodes', getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))],
  ]);
}

export function getAppendCanopyNodesInstructionDataCodec(): Codec<
  AppendCanopyNodesInstructionDataArgs,
  AppendCanopyNodesInstructionData
> {
  return combineCodec(
    getAppendCanopyNodesInstructionDataEncoder(),
    getAppendCanopyNodesInstructionDataDecoder()
  );
}

export type AppendCanopyNodesInput<
  TAccountMerkleTree extends string = string,
  TAccountAuthority extends string = string,
  TAccountNoop extends string = string,
> = {
  merkleTree: Address<TAccountMerkleTree>;
  /**
   * Authority that controls write-access to the tree
   * Typically a program, e.g., the Bubblegum contract validates that leaves are valid NFTs.
   */
  authority: TransactionSigner<TAccountAuthority>;
  /** Program used to emit changelogs as cpi instruction data. */
  noop: Address<TAccountNoop>;
  startIndex: AppendCanopyNodesInstructionDataArgs['startIndex'];
  canopyNodes: AppendCanopyNodesInstructionDataArgs['canopyNodes'];
};

export function getAppendCanopyNodesInstruction<
  TAccountMerkleTree extends string,
  TAccountAuthority extends string,
  TAccountNoop extends string,
  TProgramAddress extends
    Address = typeof MPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS,
>(
  input: AppendCanopyNodesInput<
    TAccountMerkleTree,
    TAccountAuthority,
    TAccountNoop
  >,
  config?: { programAddress?: TProgramAddress }
): AppendCanopyNodesInstruction<
  TProgramAddress,
  TAccountMerkleTree,
  TAccountAuthority,
  TAccountNoop
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    noop: { value: input.noop ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.noop),
    ],
    programAddress,
    data: getAppendCanopyNodesInstructionDataEncoder().encode(
      args as AppendCanopyNodesInstructionDataArgs
    ),
  } as AppendCanopyNodesInstruction<
    TProgramAddress,
    TAccountMerkleTree,
    TAccountAuthority,
    TAccountNoop
  >;

  return instruction;
}

export type ParsedAppendCanopyNodesInstruction<
  TProgram extends string = typeof MPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    merkleTree: TAccountMetas[0];
    /**
     * Authority that controls write-access to the tree
     * Typically a program, e.g., the Bubblegum contract validates that leaves are valid NFTs.
     */

    authority: TAccountMetas[1];
    /** Program used to emit changelogs as cpi instruction data. */
    noop: TAccountMetas[2];
  };
  data: AppendCanopyNodesInstructionData;
};

export function parseAppendCanopyNodesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAppendCanopyNodesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      merkleTree: getNextAccount(),
      authority: getNextAccount(),
      noop: getNextAccount(),
    },
    data: getAppendCanopyNodesInstructionDataDecoder().decode(instruction.data),
  };
}
